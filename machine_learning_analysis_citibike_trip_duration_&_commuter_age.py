# -*- coding: utf-8 -*-
"""Machine Learning Analysis - CitiBike Trip Duration & Commuter Age

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/reshmitha0424/Ridership-of-Urban-Bike-Shares/blob/main/Machine%20Learning%20Analysis%20-%20CitiBike%20Trip%20Duration%20%26%20Commuter%20Age

### **Loading the data**

First, we need to get access to the data.  To do that, we need to link this notebook with out Google Drive.  

**Why are we doing this?:**

Mounting Google Drive in Colab is a good practise, especially when using datasets stored in Drive. Because:

*   it allows direct access without needing to manually upload files each session.
*   This ensures **persistent storage**, prevents data loss when the session resets, and makes it easier to handle large files that may exceed Colab’s temporary storage limits.
*   Additionally, it enables seamless collaboration, as shared datasets in Drive can be accessed by multiple users.

**To do this:**

On the left there is a folder icon which has Google Drive icon on it.  Click that and in the popout menu click "Mount Drive".

This will create a cell of code for you to run.  Follow the instructions to link this notebook with your Google Drive.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Make sure to save the Data files in the same google drive which you have mounted.

In the menu on the left, click the `drive` folder (you may need to click the folder with the refresh icon to see your `drive` folder),

Right click on the file and select "copy path".  

Put that path to the file into a string variable called `fname` and use pandas `read_csv()` function to load the data (no need to skip rows) into a pandas DataFrame called `citi`.
"""

fname = "include-file-path" #include the link of the copied file path (either from your google drive [option1] or directly uploaded from the computer[option2])
import pandas as pd
citi = pd.read_csv(fname)
citi.head() #shows the first 5 rows of the dataset

"""### **Calculate useful metrics**

Our end goal is to get an estimate of what age riders are using citi bikes for commuter travel the most.  
**We're going to do that by separating the trips into short and long trips and then finding the age that has the highest fraction of short trips.**

Let's convert a couple columns of data into some quantities that will be useful in our model below.

First, use the values from the "Birth Year" column to **calculate the age of the rider.  Add those values as a column called "age" in your `citi` DataFrame**.
"""

citi["age"] = 2016 - citi["Birth Year"] #Note that the year given in the dataset is 2016.

"""Now, extract the "Trip Duration" column (the units of which are seconds) and **take the logarithm of those using numpy's `log10()` function$^{\dagger}$.  Put them into a column in `citi` called "logdur".**

<i><small>$^{\dagger}$ recall that log10(x) = y where 10<sup>y</sup> = x, so if a trip duration is `t` = 100 seconds, `np.log10(t)` = 2 since 10<sup>2</sup> = 100.</small>
"""

import numpy as np
citi["logdur"] = np.log10(citi["Trip Duration"])
citi.head() #verifying

"""### **Visualize the data and update metrics**

Since we're interested in trip durations, **use `citi`'s `.hist()` method to plot a histogram of the "Trip Duration" column of the data setting the range from 0 to 10000 seconds and using 100 bins**.
"""

citi["Trip Duration"].hist(bins=100, range=(0, 10000))

"""**Would you characterize this distribution as "Gaussian"?  Why or why not?**

<b>What is gaussian distribution?</b>

The Gaussian distribution, also known as the normal distribution, is a continuous probability distribution that is symmetric about its mean. It has the characteristic bell-shaped curve, where most of the data points are concentrated around the mean, with fewer points in the tails. The distribution is fully described by two parameters: mean (μ), which determines the center, and standard deviation (σ), which controls the spread of the data. In a standard normal distribution, the mean is 0, and the standard deviation is 1.

To determine whether a histogram follows a Gaussian distribution, look for the following features:



*   A unimodal (single peak) and symmetric shape centered around the mean.
*   The tails should gradually decrease on both sides, approaching but never touching the x-axis.


<b>Observation:</b>

Here, in the above graph, it can be clearly observed that it is not gaussian, as the graph has positive skewness, i.e., there is long tail towards right. This implies that there are fewer long trips and more shorter trips.

Now, **plot a histogram with 100 bins (no need to set the range) of the logarithm of the trip durations that you calculated above**.
"""

citi["logdur"].hist(bins=100)

import matplotlib.pyplot as plt
plt.xlabel("Log of Trip Duration (log10(seconds))")
plt.ylabel("Frequency")
plt.title("Histogram of Logarithm of Trip Durations")
plt.show()

"""**Would you characterize this distribution as Gaussian?  Why or why not?**

It can be observed that there is a bell shaped curve and it is almost symmetric. So, it mostly looks like a Gaussian distribution, though there is slightly positive skewness.

The previous plot might give you a sense for how to break up the rides into "short" and "long" rides (which we'll use as a proxy for "commuter" and "recreational" respectively).  **Calculate the median of the logarithm of the trip duration.**
"""

logdur_median = citi["logdur"].median()
logdur_median

"""We'll use this as the short/long dividing line.  **What is the duration of this trip in minutes?  Does that seem like a resonable time for commuting?  How far would you get in that time biking at 10 mph (and is that a reasonable biking speed)?**

Here the median of logdur is 2.6138418218760693. This is log of actual trip in secons. To understand the duration of this trip in minutes, we need to raise this value to the power of 10 (as we have used base 10 for converting it into log), and then divide by 60 to get the time in minutes.
"""

timeDur_min = 10**logdur_median/60
timeDur_min

"""It can be seen that the duration of trip in minutes is 6.8500000000000005. This seems like a reasonable time for commuting for shorter trips, like moving in neighborhoods.

Given 10mph as speed, the distance travelled in that time duration can be calculated with the formula [distance = speed*time]. Here the time is in minutes, so we need to divide time (in min) by 60 to get the time in hours; as the speed is given in miles per hour (mph).
"""

speed = 10
distance = speed * (timeDur_min/60)
distance

"""At 10 mph, 1.1416666666666668 miles can be travelled in 6.8500000000000005 minutes.

**Add two columns to your `citi` dataframe: a column called "short_trip" that is `True` when the trip duration is less than dividing line above and `False` otherwise, and a column called "long_trip" that is `True` when the duration is greater than or equal to the dividing line above but `False` otherwise.**
"""

citi["short_trip"] = citi["logdur"] < logdur_median
citi["long_trip"] = citi["logdur"] >= logdur_median
citi.head( ) #verifying

"""Now, we're going to use a pandas dataframe trick that is quite useful (and related to similar functionality in other data analysis software) to "group" the data "by" the age using `.groupby()` method.  It also needs a function to perform on the groups which outputs another data frame.  If you've accomplished the above correctly, this line of code should execute without an error:"""

citig = citi.groupby("age").sum() #groups the data by age and sums the values in numerical columns.
#we are creating a new datafram citig to not disturb the main dataframe.
citig.head() #verifying

#Removing unwanted columns
citig = citig.drop(columns=["User Type", "Bike ID", "Start Station ID", "Start Station Name", "Start Station Latitude", "Start Station Longitude",
           "End Station ID", "End Station Name", "End Station Latitude", "End Station Longitude", "Start Time", "Stop Time"])
citig.head() #verifying

"""This new dataframe should now have an index that is the age groups and two columns (called "short_trip" and "long_trip") that are the sums of short and long trips for that age group.  **Get the total number of trips for that age group by adding those together.**"""

citig["total_trips"] = citig["short_trip"] + citig["long_trip"]
citig.head() #verifying

"""**Plot the fraction of trips that are short as a function of age group.**$^{\dagger}$

<small>$^{\dagger}$ you can access the index values of a dataframe like so: `age_group = citig.index`</small>
"""

#plotting fraction of trips that are short as a function of age group.
citig["shortTrip_frac"] = citig["short_trip"]/citig["total_trips"]

#Here, after the new data frame is created by grouping the data by age, there is no age column now, it acts as an index in the new data frame
age_group = citig.index
plt.plot(age_group, citig["shortTrip_frac"])

plt.xlabel("Age Group") #Name/ Label for the X axis
plt.ylabel("Fraction of Short Trips") #Name/ Label for the Y axis
plt.title("Fraction of Short Trips by Age Group") #Name/ Label for the plot
plt.xticks(citig.index[::5])
#`plt.xticks(citig.index[::5])` sets x-axis ticks at every 5th index of the DataFrame `citig`,
#reducing clutter and improving readability in the plot.
#here citig.index => age column.
#this allows the ticks on the x axis to appear with a difference of 5.
plt.show() #to display the plot

"""**What is the age group that is predominantly using citi bikes for commuting?  How did you make that determination?**

It can be observed that the fraction of short trips by age group is highest for the age group of 75. Therefore, 75 is the age group is predominantly using citi bikes for commuting.

**What are the assumptions that went into finding this model?  And how do your findings relate to the information in the resources?**

The assumptions that went into finding this model:

1. We assumed that short trips are primarily used for commuting rather than recreational purposes. As the commuting time required for moving in the neighborhood or between stores or workplace typically requires less than 20min.
2. It was also assumed that different age groups might have different biking habits, like older people using Citi Bikes more for practical commuting.
3. We assumed the data is accurate and free of significant errors.
4. It was assumed that the data we analyzed reflects the actual patterns of Citi Bike use in New York City.

These assumptions align with insights from the Citi Bike program's growth in NYC, as seen in the official Citi Bike site and DOT Facts. It was said that biking has become increasingly popular across all age groups due to its convenience and environmental benefits.
The trend observed in the analysis, where older age groups are using Citi Bikes for commuting, fits with broader patterns in the city, where bikes are becoming a favored choice for short-distance travel, especially for those who might avoid heavier traffic or public transport, and is less risky compared to other commuting vehicles.
"""